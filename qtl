# Analysing using R/qtl:

# You need individuals typed at markers, with phenotype data. 

library(qtl)

# To get the tutorial code do: 
url.show("https://rqtl.org/rqtltour.R")

# Within the tutorial is some hypertension data - 250 male mice, with a single hypertension phenotype and 174 genetic markers.
# To get the tutorial data do:
data(hyper)
ls()
# To learn about the data do:
?hyper
summary(hyper)
nind(hyper)
nphe(hyper)
nchr(hyper)
totmar(hyper)
nmar(hyper)
# In the plot below, missing data is coloured black. 
plot(hyper)
# Or, you can plot just one piece of the data:
plotMissing(hyper)
plotMap(hyper)
# There is one phenotype - hypertension value, but there is a second 'pheno' indicating that individuals are male:
plotPheno(hyper, pheno.col=1)
plotPheno(hyper, pheno.col=2)
plotMap(hyper, chr=c(1, 4, 6, 7, 15), show.marker.names=TRUE)

# You can order individuals by phenotype:
plotMissing(hyper, reorder=TRUE)

# You can remove markers with no data in any individual (i.e. not a single individual has data):
hyper <- drop.nullmarkers(hyper)
totmar(hyper)

# Estimate recombination fractions between all pairs of markers, and plot them. 
# This also calculates LOD scores for the test of H0: r = 1/2. 
# The plot of the recombination fractions can be either with recombination fractions in the upper part
# and LOD scores below, or with just recombination fractions or just LOD scores. 
# Red corresponds to a small recombination fraction or a big LOD score
# Blue corresponds to a large recombination fraction (rarely inherited together) and a low LOD score.
# Gray indicates missing values.
hyper <- est.rf(hyper)
plotRF(hyper)
plotRF(hyper, chr=c(1,4), mark.diagonal=T, alternate.chrid=T, chr=c(1,4,15), what="lod")
# Note that what can be "rf" or "lod" or "both", by default both are plotted - with rf above and lod below. 

# Re-estimate the genetic map (keeping the order of markers fixed), and plot the original map against the newly estimated
# one.
newmap <- est.map(hyper, error.prob=0.01)
plotMap(hyper, newmap)

# Do you want to replace with the new estimated map? Think carefully about this... 
# If you do, then you can do it with: 
# hyper <- replace.map(hyper, newmap)

# We now turn to the identification of genotyping errors. In the following, we calculate the error LOD scores of Lincoln
# and Lander (1992). A LOD score is calculated for each individual at each marker; large scores indicate likely genotyping
# errors.
hyper <- calc.errorlod(hyper, error.prob=0.01)
# This calculates the genotype error LOD scores and inserts them into the hyper object.
# The function top.errorlod gives a list of genotypes that may be in error. Error LOD scores < 4 can probably be
# ignored.
top.errorlod(hyper)

# The function plotGeno may be used to inspect the observed genotypes for a chromosome, with likely genotyping errors
# flagged. Of course, itâ€™s difficult to look at too many individuals at once. Note that white = AA and black = AB (for a
# backcross).
plotGeno(hyper, chr=16, ind=c(24:34, 71:81))
# Blue cross suggests a recombination breakpoint.
# Errors are shown using a red box outline.
# It looks like, in this dataset, that it has suggested errors where there is a low chance of recombination, yet the individual 
# has appraently experienced recombination there. But then has experienced it AGAIN on the other side.... 
# Any errors identified need to be checked in the raw data (not in qtl program).

# The function plotInfo plots a measure of the proportion of missing genotype information in the genotype data. The
# missing information is calculated in two ways: as entropy, or via the variance of the conditional genotypes, given the
# observed marker data. (See the help file, using ?plotInfo.)
# NOTE - not quite sure what this is. 
plotInfo(hyper)
plotInfo(hyper, chr=c(1,4,15))
plotInfo(hyper, chr=c(1,4,15), method="entropy")
plotInfo(hyper, chr=c(1,4,15), method="variance")

### QTL analysis:

# R/qtl uses hidden Markov model (HMM) technology to calculate QTL genotype probabilities.
# They simulate from the joint genotype distribution and calculate the most likely sequence of underlying genotypes (I assume for
# the phenotype) - based on the observed genotypes in the data.
# It allows for some error of genotyping.
# Note, they assume, for convenience, no 'crossover interference' - crossover interference was a phrase coined by Muller which 
# states that during meiosis, recombination events don't occur more than once on a chromosome - or at least that they are prevented 
# from occuring close together. This seems to be regulated in C. elegans by the enzyme RTEL-1. Mutants for this enzyme have inc.
# crossovers during meiosis. Recombination rate in humans increases as the female ages. 

# step = the stepsize (in cM) at which probabilities are calculated, and at which LOD scores will later be calculated.
# 1cM = Recombination of 1%
# Note that recombination cannot exceed 50%(?) but the map length (in cM) can - providing you have enough markers - so if you only
# have 2, I think it can't be longer than 50 cM, but if you have several then you might identify that between two markers there is a 
# cM distance of, say, 20, between one of these and another is, say 34 cM, and then between a third is, say, 15 cM - so total is
# 20+34+15 = 69cM..... (https://biology.stackexchange.com/questions/35803/genetic-linkage-greater-than-50-centimorgans). We cannot tell
# whether unlinked markers are co-segregating 50% of the time or linked markers are inherited together 50% of the time - the
# recombination rate, r, is a value between 0 and 0.5. 

# To calculate genotype probabilities, based on the observed markers:
hyper <- calc.genoprob(hyper, step=1, error.prob=0.01)

# To perform a single-QTL (a single QTL controls the phenotype I think) genome scan with a normal model:
# Note that the model chosen (default normal) relates to the phenotype data - can have normal, binary, two-part (not sure what this is
# for), or non-parametric. 
# The method determines the way to estimate the genotypes
# maximum likelihood via the EM algorithm (Lander and Botstein 1989) or use Haley-Knott regression (Haley and Knott
# 1992).
# multiple imputation method of Sen and Churchill (2001). This requires that we first use sim.geno
# to simulate from the joint genotype distribution, given the observed marker data.
# n.draws indicates the number of imputations to perform. Larger values = inc. precision but takes more time and memory.
out.em <- scanone(hyper)
out.hk <- scanone(hyper, method="hk")
hyper <- sim.geno(hyper, step=2, n.draws=16, error.prob=0.01)
out.imp <- scanone(hyper, method="imp")

summary(out.em)
# Gives the max LOD score and position on each chromosome.
summary(out.em, threshold=3)
#         chr  pos  lod
#c1.loc89   1 92.3 3.73
#D4Mit164   4 37.3 8.06
summary(out.hk, threshold=3)
#         chr  pos  lod
#c1.loc89   1 92.3 3.76
#D4Mit164   4 37.3 8.09
summary(out.imp, threshold=3)
#         chr  pos  lod
#c1.loc92   1 95.3 3.62
#D4Mit164   4 37.3 8.07

## Note that imp has pulled out a different marker on Chr1 to the other two.

# Or, could get just the highest LOD score on each chromosome:
max(out.em)
max(out.hk)
max(out.imp)

# I then tried to look at Chr4 with just some individuals - aiming for those of the extreme - but unable to figure out 
# how to determine which individual had which phenotype.
# The order by phenotype for plot missing was great, but doesn't actually correspond to an individuals number.
# Those with the extreme phenotypes are inviduals 1-~100 in the cross object, but don't know which is which.
plotGeno(hyper, chr=4, ind=c(1:100))
# This lets you see that there is a split in the genotypes, but not how they fit the phenotype. 

# To plot the LOD scores against the markers (in cM):
plot(out.em, chr=c(1,4,15))
# Plot all three LOD estimates on the same graph (max three using this code):
plot(out.em, out.hk, out.imp, chr=c(1,4,15))
# Plot each LOD estimate separately, but layer them one on top of the other on the same graph (the add=TRUE is what does it):
plot(out.em, chr=c(1,4,15))
plot(out.hk, chr=c(1,4,15), col="blue", add=TRUE)
plot(out.imp, chr=c(1,4,15), col="red", add=TRUE)

# The function scanone may also be used to perform a permutation test to get a genome-wide LOD significance threshold.
# n.perm (If specified, a permutation test is performed rather than an analysis of the observed data. 
# This argument defines the number of permutation replicates)
# For Haley-Knott regression, this can be quite fast.

operm.hk <- scanone(hyper, method="hk", n.perm=1000)
summary(operm.hk, alpha=0.05)
# LOD thresholds (1000 permutations)
#    lod
# 5% 2.73
# Can change alpha for to get 1% etc: summary(operm.hk, alpha=0.01)

# To get the permutations and p-values for the calculated LOD scores for markers can do the following - note the 5% cut-off included:
summary(out.hk, perms=operm.hk, alpha=0.05, pvalues=TRUE)
#         chr  pos  lod  pval
# c1.loc89   1 92.3 3.76 0.008
# D4Mit164   4 37.3 8.09 0.000
# Removing alpha would return all chromosome LOD scores. And (presuambly) let you know whether they are significantly greater than the
# genome wide LOD threshold calculated by permutation testing.

### What if there were two QTL contributing to the phenotype? Interactive or additive in their effect?
# scantwo performs a two-dimensional genome scan with a two-QTL model. For every pair of positions, it
# calculates a LOD score for the full model (two QTL plus interaction) and a LOD score for the additive model (two QTL
# but no interaction). This be quite time consuming, and so you may wish to do the calculations on a coarser grid.

hyper <- calc.genoprob(hyper, step=5, error.prob=0.01)
out2.hk <- scantwo(hyper, method="hk")

# You can also use the other methods, (em or imp) but these are more time consuming. 

# summary(out2.hk)
# Doing the summary is fairly pointless - too much info! 


# The summary function considers each pair of chromosomes, and calculates the maximum LOD score for the full model
# (Mf) and the maximum LOD score for the additive model (Ma). These two models are allowed to be maximized at
# different positions. We futher calculate a LOD score for a test of epistasis, Mi = Mf âˆ’ Ma, and two LOD scores that
# concern evidence for a second QTL: Mfv1 is the LOD score comparing the full model to the best single-QTL model and
# Mav1 is the LOD score comparing the additive model to the best single-QTL model.
# In the summary, we must provide five thresholds, for Mf , Mfv1, Mi, Ma, and Mav1, respectively. Call these Tf , Tfv1,
# Ti, Ta, and Tav1. We then report those pairs of chromosomes for which at least one of the following holds:7
# â€¢ Mf â‰¥ Tf and (Mfv1 â‰¥ Tfv1 or Mi â‰¥ Ti)
# â€¢ Ma â‰¥ Ta and Mav1 â‰¥ Tav1
# The thresholds can be obtained by a permutation test (see below), but this is extremely time-consuming. For a mouse
# backcross, we suggest the thresholds (6.0, 4.7, 4.4, 4.7, 2.6) for the full, conditional-interactive, interaction, additive, and
# conditional-additive LOD scores, respectively. For a mouse intercross, we suggest the thresholds (9.1, 7.1, 6.3, 6.3, 3.3)
# for the full, conditional-interactive, interaction, additive, and conditional-additive LOD scores, respectively. These were
# obtained by 10,000 simulations of crosses with 250 individuals, markers at a 10 cM spacing, and analysis by Haley-Knott
# regression.
summary(out2.hk, thresholds=c(6.0, 4.7, 4.4, 4.7, 2.6))
# The appropriate decision rule is not yet completely clear. I am inclined to ignore Mi and to choose genome-wide
# thresholds for the other four based on a permutation, using a common significance level for all four. Mi would be
# ignored if we gave it a very large threshold, as follows.
summary(out2.hk, thresholds=c(6.0, 4.7, Inf, 4.7, 2.6))

plot(out2.hk)
plot(out2.hk, chr=c(1,4,6,15))
# Note, the upper left triangle contains the LOD scores for Mi, and the lower right contains the LOD for Ma

max(out2.hk)
# two-locus positions with the maximum LOD score for the full and additive models

# To get a genome-wide LOD significance thresholds by permutation testing (can be quite time consuming!):
operm2.hk <- scantwo(hyper, method="hk", n.perm=100)
summary(operm2.hk)

# Can use the permutations to get the p-values for the LOD scores for the models. If want to ignore the interaction threshold then
# put alpha as 0, which equates to a threshold of infinity:
summary(out2.hk, perms=operm2.hk, pvalues=TRUE, alphas=c(0.05, 0.05, 0, 0.05, 0.05))

# NOTE: You canâ€™t really trust these results. Haley-Knott regression performs poorly in the case of selective genotyping (as with
# the hyper data). Standard interval mapping or imputation would be better, but Haley-Knott regression has the advantage
# of speed, which is the reason we use it here.

### To check the fit of the models used:

# Currently, only multiple imputation and Haley-Knott regression has been implemented. We use multiple imputation here, 
# as Haley-Knott regression performs poorly in the case of selective genotyping, which was used for the hyper data.

# We make a qtl as below, with 5 QTL at fixed and specified positions:
chr <- c(1, 1, 4, 6, 15)
pos <- c(50, 76, 30, 70, 20)
qtl <- makeqtl(hyper, chr, pos)


# Finally, we use the function fitqtl to fit a model with five QTL, and allowing the QTL on chr 6 and 15 to interact.
my.formula <- y ~ Q1 + Q2 + Q3 + Q4 + Q5 + Q4:Q5
out.fitqtl <- fitqtl(hyper, qtl=qtl, formula=my.formula)
summary(out.fitqtl)
# See Example 5 (page 14) for a thorough discussion of the multiple QTL mapping methods in R/qtl.






